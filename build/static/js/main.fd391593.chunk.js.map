{"version":3,"sources":["utils/API.js","components/table.js","components/navbar.js","App.js","reportWebVitals.js","index.js"],"names":["axios","get","Row","props","scope","Avatar","alt","lastname","src","image","firstname","gender","cell","email","age","country","Button","color","Navigation","useState","isOpen","setIsOpen","Navbar","dark","expand","NavbarBrand","href","NavbarToggler","onClick","Collapse","navbar","Nav","className","NavbarText","App","people","setPeople","useEffect","API","then","res","data","results","dropdownOpen","setDropdownOpen","Container","Jumbotron","class","type","onChange","event","value","target","filter","p","name","last","first","console","log","length","id","placeholder","aria-label","Dropdown","toggle","prevState","DropdownToggle","caret","DropdownMenu","DropdownItem","sorted","sort","a","b","dob","location","Table","hover","map","picture","thumbnail","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fd391593.chunk.js","sourcesContent":["import axios from 'axios'\n\nexport default {\n    getPeople: function(){\n      return axios.get('https://randomuser.me/api/?results=50&seed=heybaby')\n    }\n}","import React from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport {Button} from 'reactstrap'\nimport {MdExpandMore} from 'react-icons/md'\n\nconst Row = (props) => {\n    return(\n        <tr>\n        <th scope=\"row\"><Avatar alt={props.lastname} src={props.image} /></th>\n        <td>{props.firstname}</td>\n        <td>{props.lastname}</td>\n        <td>{props.gender}</td>\n        <td>{props.cell}</td>\n        <td>{props.email}</td>\n        <td>{props.age}</td>\n        <td>{props.country}</td>\n        <td><Button color=\"info\"><MdExpandMore/></Button></td>\n      </tr>\n    )\n}\n\nexport default Row","import React, { useState } from 'react';\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavbarText\n} from 'reactstrap';\n\nconst Navigation = (props) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const toggle = () => setIsOpen(!isOpen);\n\n  return (\n    <div>\n      <Navbar color=\"dark\" dark expand=\"md\">\n        <NavbarBrand href=\"/\">EmployeeDex</NavbarBrand>\n        <NavbarToggler onClick={toggle} />\n        <Collapse isOpen={isOpen} navbar>\n          <Nav className=\"mr-auto\" navbar>\n           \n           \n           \n          </Nav>\n          <NavbarText>Gotta Hire them All!</NavbarText>\n        </Collapse>\n      </Navbar>\n    </div>\n  );\n}\n\nexport default Navigation;\n","import { Table } from 'reactstrap';\nimport './App.css';\nimport API from './utils/API'\nimport { React,useEffect, useState} from 'react'\nimport {Jumbotron, Container, Dropdown, DropdownToggle, DropdownMenu, DropdownItem, Button } from 'reactstrap'\nimport Row from './components/table'\nimport Navigation from './components/navbar'\nimport {MdClear} from 'react-icons/md'\nfunction App() {\n  const [people, setPeople] = useState([])\n    useEffect(() => {\n        API.getPeople()\n        .then(res => {\n            setPeople(res.data.results)\n           \n        })\n    }, [])\n    const [dropdownOpen, setDropdownOpen] = useState(false);\n\n    const toggle = () => setDropdownOpen(prevState => !prevState);\n\n    const handleInputChange = event => {\n      const value = event.target.value\n      const results = people.filter(p => {\n        return p.name.last === value || p.name.first === value\n      })\n      console.log(results)\n    if (results.length !== 0){\n        setPeople(results)\n      } \n    }\n\n    const goBack = () => {\n      API.getPeople()\n      .then(res => {\n          setPeople(res.data.results)\n         \n      })\n    }\n\n    const ageSort = () => {\n     let sorted = [...people]\n      sorted.sort( function( a , b){\n        if(a.dob.age > b.dob.age) return 1;\n        if(a.dob.age < b.dob.age) return -1;\n        return 0;\n    });\n      setPeople(sorted)\n      \n    }\n\n    const abcSort = () => {\n      let sorted = [...people]\n       sorted.sort( function( a , b){\n         if(a.name.first > b.name.first) return 1;\n         if(a.name.first < b.name.first) return -1;\n         return 0;\n     });\n     setPeople(sorted)\n\n       \n     }\n\n     const countrySort = () => {\n      let sorted = [...people]\n       sorted.sort( function( a , b){\n         if(a.location.country > b.location.country) return 1;\n         if(a.location.country < b.location.country) return -1;\n         return 0;\n     });\n     setPeople(sorted)\n     \n       \n     }\n  return (\n    <div className=\"App\">\n      <Navigation/>\n      <Container>\n      <Jumbotron>\n      <div class=\"form-inline\">\n      <Button onClick={goBack}color=\"secondary\"><MdClear/></Button>\n  <input type=\"search\" onChange={handleInputChange} id=\"form1\" className=\"form-control\" placeholder=\"Search By Name\"\n  aria-label=\"Search\" />\n  <Dropdown isOpen={dropdownOpen} toggle={toggle}>\n      <DropdownToggle caret>\n        Sort\n      </DropdownToggle>\n      <DropdownMenu>\n      <DropdownItem onClick={ageSort}>Sort By Age</DropdownItem>\n        <DropdownItem onClick={abcSort}>Sort Alphabetically</DropdownItem>\n        <DropdownItem onClick={countrySort}>Sort By Location</DropdownItem>\n        \n      </DropdownMenu>\n    </Dropdown>\n</div>\n        {people.length ? (\n      <Table hover>\n        <thead>\n          <tr>\n            <th>Avatar</th>\n            <th>First Name</th>\n            <th>Last Name</th>\n            <th>Gender</th>\n            <th>Cell</th>\n            <th>Email</th>\n            <th>Age</th>\n            <th>Country</th> \n            <th>More Info</th>          \n          </tr>\n        </thead>\n        <tbody>\n         \n        {people.map(p => {\n      return (\n        <Row key={p.cell} image={p.picture.thumbnail} firstname={p.name.first} lastname={p.name.last} gender={p.gender} cell={p.cell} email={p.email} age={p.dob.age} country={p.location.country}/>\n      )\n    })}\n         \n        </tbody>\n      </Table>\n        ) : (\n          <h1>No Results</h1>\n        )}\n      </Jumbotron>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}